// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test01.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test01.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* N_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  N_reflection_ = NULL;
struct NOneofInstance {
  ::google::protobuf::int32 o1_;
  const ::std::string* o2_;
}* N_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* N_M_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  N_M_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_test01_2eproto() {
  protobuf_AddDesc_test01_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test01.proto");
  GOOGLE_CHECK(file != NULL);
  N_descriptor_ = file->message_type(0);
  static const int N_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(N_default_oneof_instance_, o1_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(N_default_oneof_instance_, o2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N, n1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N, n2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N, O_),
  };
  N_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      N_descriptor_,
      N::default_instance_,
      N_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N, _unknown_fields_),
      -1,
      N_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(N));
  N_M_descriptor_ = N_descriptor_->nested_type(0);
  static const int N_M_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N_M, v1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N_M, v2_),
  };
  N_M_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      N_M_descriptor_,
      N_M::default_instance_,
      N_M_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N_M, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N_M, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(N_M));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test01_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    N_descriptor_, &N::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    N_M_descriptor_, &N_M::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test01_2eproto() {
  delete N::default_instance_;
  delete N_default_oneof_instance_;
  delete N_reflection_;
  delete N_M::default_instance_;
  delete N_M_reflection_;
}

void protobuf_AddDesc_test01_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014test01.proto\"_\n\001N\022\014\n\002o1\030\003 \001(\005H\000\022\014\n\002o2\030"
    "\004 \001(\tH\000\022\n\n\002n1\030\001 \002(\002\022\020\n\002n2\030\002 \002(\0132\004.N.M\032\033\n"
    "\001M\022\n\n\002v1\030\001 \002(\005\022\n\n\002v2\030\002 \002(\tB\003\n\001O", 111);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test01.proto", &protobuf_RegisterTypes);
  N::default_instance_ = new N();
  N_default_oneof_instance_ = new NOneofInstance;
  N_M::default_instance_ = new N_M();
  N::default_instance_->InitAsDefaultInstance();
  N_M::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test01_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test01_2eproto {
  StaticDescriptorInitializer_test01_2eproto() {
    protobuf_AddDesc_test01_2eproto();
  }
} static_descriptor_initializer_test01_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int N_M::kV1FieldNumber;
const int N_M::kV2FieldNumber;
#endif  // !_MSC_VER

N_M::N_M()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:N.M)
}

void N_M::InitAsDefaultInstance() {
}

N_M::N_M(const N_M& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:N.M)
}

void N_M::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  v1_ = 0;
  v2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

N_M::~N_M() {
  // @@protoc_insertion_point(destructor:N.M)
  SharedDtor();
}

void N_M::SharedDtor() {
  if (v2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete v2_;
  }
  if (this != default_instance_) {
  }
}

void N_M::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* N_M::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return N_M_descriptor_;
}

const N_M& N_M::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test01_2eproto();
  return *default_instance_;
}

N_M* N_M::default_instance_ = NULL;

N_M* N_M::New() const {
  return new N_M;
}

void N_M::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    v1_ = 0;
    if (has_v2()) {
      if (v2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        v2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool N_M::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:N.M)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 v1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v1_)));
          set_has_v1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_v2;
        break;
      }

      // required string v2 = 2;
      case 2: {
        if (tag == 18) {
         parse_v2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->v2().data(), this->v2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "v2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:N.M)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:N.M)
  return false;
#undef DO_
}

void N_M::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:N.M)
  // required int32 v1 = 1;
  if (has_v1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->v1(), output);
  }

  // required string v2 = 2;
  if (has_v2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->v2().data(), this->v2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "v2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->v2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:N.M)
}

::google::protobuf::uint8* N_M::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:N.M)
  // required int32 v1 = 1;
  if (has_v1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->v1(), target);
  }

  // required string v2 = 2;
  if (has_v2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->v2().data(), this->v2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "v2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->v2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:N.M)
  return target;
}

int N_M::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 v1 = 1;
    if (has_v1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v1());
    }

    // required string v2 = 2;
    if (has_v2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void N_M::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const N_M* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const N_M*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void N_M::MergeFrom(const N_M& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_v1()) {
      set_v1(from.v1());
    }
    if (from.has_v2()) {
      set_v2(from.v2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void N_M::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void N_M::CopyFrom(const N_M& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool N_M::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void N_M::Swap(N_M* other) {
  if (other != this) {
    std::swap(v1_, other->v1_);
    std::swap(v2_, other->v2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata N_M::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = N_M_descriptor_;
  metadata.reflection = N_M_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int N::kO1FieldNumber;
const int N::kO2FieldNumber;
const int N::kN1FieldNumber;
const int N::kN2FieldNumber;
#endif  // !_MSC_VER

N::N()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:N)
}

void N::InitAsDefaultInstance() {
  N_default_oneof_instance_->o1_ = 0;
  N_default_oneof_instance_->o2_ = &::google::protobuf::internal::GetEmptyStringAlreadyInited();
  n2_ = const_cast< ::N_M*>(&::N_M::default_instance());
}

N::N(const N& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:N)
}

void N::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  n1_ = 0;
  n2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_O();
}

N::~N() {
  // @@protoc_insertion_point(destructor:N)
  SharedDtor();
}

void N::SharedDtor() {
  if (has_O()) {
    clear_O();
  }
  if (this != default_instance_) {
    delete n2_;
  }
}

void N::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* N::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return N_descriptor_;
}

const N& N::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test01_2eproto();
  return *default_instance_;
}

N* N::default_instance_ = NULL;

N* N::New() const {
  return new N;
}

void N::clear_O() {
  switch(O_case()) {
    case kO1: {
      // No need to clear
      break;
    }
    case kO2: {
      delete O_.o2_;
      break;
    }
    case O_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = O_NOT_SET;
}


void N::Clear() {
  if (_has_bits_[0 / 32] & 12) {
    n1_ = 0;
    if (has_n2()) {
      if (n2_ != NULL) n2_->::N_M::Clear();
    }
  }
  clear_O();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool N::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:N)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float n1 = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &n1_)));
          set_has_n1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_n2;
        break;
      }

      // required .N.M n2 = 2;
      case 2: {
        if (tag == 18) {
         parse_n2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_n2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_o1;
        break;
      }

      // optional int32 o1 = 3;
      case 3: {
        if (tag == 24) {
         parse_o1:
          clear_O();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &O_.o1_)));
          set_has_o1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_o2;
        break;
      }

      // optional string o2 = 4;
      case 4: {
        if (tag == 34) {
         parse_o2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_o2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->o2().data(), this->o2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "o2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:N)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:N)
  return false;
#undef DO_
}

void N::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:N)
  // required float n1 = 1;
  if (has_n1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->n1(), output);
  }

  // required .N.M n2 = 2;
  if (has_n2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->n2(), output);
  }

  // optional int32 o1 = 3;
  if (has_o1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->o1(), output);
  }

  // optional string o2 = 4;
  if (has_o2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->o2().data(), this->o2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "o2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->o2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:N)
}

::google::protobuf::uint8* N::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:N)
  // required float n1 = 1;
  if (has_n1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->n1(), target);
  }

  // required .N.M n2 = 2;
  if (has_n2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->n2(), target);
  }

  // optional int32 o1 = 3;
  if (has_o1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->o1(), target);
  }

  // optional string o2 = 4;
  if (has_o2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->o2().data(), this->o2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "o2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->o2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:N)
  return target;
}

int N::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required float n1 = 1;
    if (has_n1()) {
      total_size += 1 + 4;
    }

    // required .N.M n2 = 2;
    if (has_n2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->n2());
    }

  }
  switch (O_case()) {
    // optional int32 o1 = 3;
    case kO1: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->o1());
      break;
    }
    // optional string o2 = 4;
    case kO2: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->o2());
      break;
    }
    case O_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void N::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const N* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const N*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void N::MergeFrom(const N& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.O_case()) {
    case kO1: {
      set_o1(from.o1());
      break;
    }
    case kO2: {
      set_o2(from.o2());
      break;
    }
    case O_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_n1()) {
      set_n1(from.n1());
    }
    if (from.has_n2()) {
      mutable_n2()->::N_M::MergeFrom(from.n2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void N::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void N::CopyFrom(const N& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool N::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  if (has_n2()) {
    if (!this->n2().IsInitialized()) return false;
  }
  return true;
}

void N::Swap(N* other) {
  if (other != this) {
    std::swap(n1_, other->n1_);
    std::swap(n2_, other->n2_);
    std::swap(O_, other->O_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata N::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = N_descriptor_;
  metadata.reflection = N_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

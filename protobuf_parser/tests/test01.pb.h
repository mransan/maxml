// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test01.proto

#ifndef PROTOBUF_test01_2eproto__INCLUDED
#define PROTOBUF_test01_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace foo {
namespace bar {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test01_2eproto();
void protobuf_AssignDesc_test01_2eproto();
void protobuf_ShutdownFile_test01_2eproto();

class Person;
class Person_TelNumber;
class Couple;

// ===================================================================

class Person_TelNumber : public ::google::protobuf::Message {
 public:
  Person_TelNumber();
  virtual ~Person_TelNumber();

  Person_TelNumber(const Person_TelNumber& from);

  inline Person_TelNumber& operator=(const Person_TelNumber& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person_TelNumber& default_instance();

  void Swap(Person_TelNumber* other);

  // implements Message ----------------------------------------------

  Person_TelNumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person_TelNumber& from);
  void MergeFrom(const Person_TelNumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 area_code = 1;
  inline bool has_area_code() const;
  inline void clear_area_code();
  static const int kAreaCodeFieldNumber = 1;
  inline ::google::protobuf::int32 area_code() const;
  inline void set_area_code(::google::protobuf::int32 value);

  // required int32 number = 2;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:foo.bar.Person.TelNumber)
 private:
  inline void set_has_area_code();
  inline void clear_has_area_code();
  inline void set_has_number();
  inline void clear_has_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 area_code_;
  ::google::protobuf::int32 number_;
  friend void  protobuf_AddDesc_test01_2eproto();
  friend void protobuf_AssignDesc_test01_2eproto();
  friend void protobuf_ShutdownFile_test01_2eproto();

  void InitAsDefaultInstance();
  static Person_TelNumber* default_instance_;
};
// -------------------------------------------------------------------

class Person : public ::google::protobuf::Message {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  enum EmploymentCase {
    kSelfEmployed = 5,
    kEmployedBy = 6,
    EMPLOYMENT_NOT_SET = 0,
  };

  void Swap(Person* other);

  // implements Message ----------------------------------------------

  Person* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Person_TelNumber TelNumber;

  // accessors -------------------------------------------------------

  // required string first_name = 1;
  inline bool has_first_name() const;
  inline void clear_first_name();
  static const int kFirstNameFieldNumber = 1;
  inline const ::std::string& first_name() const;
  inline void set_first_name(const ::std::string& value);
  inline void set_first_name(const char* value);
  inline void set_first_name(const char* value, size_t size);
  inline ::std::string* mutable_first_name();
  inline ::std::string* release_first_name();
  inline void set_allocated_first_name(::std::string* first_name);

  // required string last_name = 2;
  inline bool has_last_name() const;
  inline void clear_last_name();
  static const int kLastNameFieldNumber = 2;
  inline const ::std::string& last_name() const;
  inline void set_last_name(const ::std::string& value);
  inline void set_last_name(const char* value);
  inline void set_last_name(const char* value, size_t size);
  inline ::std::string* mutable_last_name();
  inline ::std::string* release_last_name();
  inline void set_allocated_last_name(::std::string* last_name);

  // required int32 date_of_birth = 3;
  inline bool has_date_of_birth() const;
  inline void clear_date_of_birth();
  static const int kDateOfBirthFieldNumber = 3;
  inline ::google::protobuf::int32 date_of_birth() const;
  inline void set_date_of_birth(::google::protobuf::int32 value);

  // optional .foo.bar.Person.TelNumber tel_number = 4;
  inline bool has_tel_number() const;
  inline void clear_tel_number();
  static const int kTelNumberFieldNumber = 4;
  inline const ::foo::bar::Person_TelNumber& tel_number() const;
  inline ::foo::bar::Person_TelNumber* mutable_tel_number();
  inline ::foo::bar::Person_TelNumber* release_tel_number();
  inline void set_allocated_tel_number(::foo::bar::Person_TelNumber* tel_number);

  // optional int32 self_employed = 5;
  inline bool has_self_employed() const;
  inline void clear_self_employed();
  static const int kSelfEmployedFieldNumber = 5;
  inline ::google::protobuf::int32 self_employed() const;
  inline void set_self_employed(::google::protobuf::int32 value);

  // optional string employed_by = 6;
  inline bool has_employed_by() const;
  inline void clear_employed_by();
  static const int kEmployedByFieldNumber = 6;
  inline const ::std::string& employed_by() const;
  inline void set_employed_by(const ::std::string& value);
  inline void set_employed_by(const char* value);
  inline void set_employed_by(const char* value, size_t size);
  inline ::std::string* mutable_employed_by();
  inline ::std::string* release_employed_by();
  inline void set_allocated_employed_by(::std::string* employed_by);

  inline EmploymentCase Employment_case() const;
  // @@protoc_insertion_point(class_scope:foo.bar.Person)
 private:
  inline void set_has_first_name();
  inline void clear_has_first_name();
  inline void set_has_last_name();
  inline void clear_has_last_name();
  inline void set_has_date_of_birth();
  inline void clear_has_date_of_birth();
  inline void set_has_tel_number();
  inline void clear_has_tel_number();
  inline void set_has_self_employed();
  inline void set_has_employed_by();

  inline bool has_Employment();
  void clear_Employment();
  inline void clear_has_Employment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* first_name_;
  ::std::string* last_name_;
  ::foo::bar::Person_TelNumber* tel_number_;
  ::google::protobuf::int32 date_of_birth_;
  union EmploymentUnion {
    ::google::protobuf::int32 self_employed_;
    ::std::string* employed_by_;
  } Employment_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_test01_2eproto();
  friend void protobuf_AssignDesc_test01_2eproto();
  friend void protobuf_ShutdownFile_test01_2eproto();

  void InitAsDefaultInstance();
  static Person* default_instance_;
};
// -------------------------------------------------------------------

class Couple : public ::google::protobuf::Message {
 public:
  Couple();
  virtual ~Couple();

  Couple(const Couple& from);

  inline Couple& operator=(const Couple& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Couple& default_instance();

  void Swap(Couple* other);

  // implements Message ----------------------------------------------

  Couple* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Couple& from);
  void MergeFrom(const Couple& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .foo.bar.Person p1 = 1;
  inline bool has_p1() const;
  inline void clear_p1();
  static const int kP1FieldNumber = 1;
  inline const ::foo::bar::Person& p1() const;
  inline ::foo::bar::Person* mutable_p1();
  inline ::foo::bar::Person* release_p1();
  inline void set_allocated_p1(::foo::bar::Person* p1);

  // required .foo.bar.Person p2 = 2;
  inline bool has_p2() const;
  inline void clear_p2();
  static const int kP2FieldNumber = 2;
  inline const ::foo::bar::Person& p2() const;
  inline ::foo::bar::Person* mutable_p2();
  inline ::foo::bar::Person* release_p2();
  inline void set_allocated_p2(::foo::bar::Person* p2);

  // optional .foo.bar.Person.TelNumber contact_number = 3;
  inline bool has_contact_number() const;
  inline void clear_contact_number();
  static const int kContactNumberFieldNumber = 3;
  inline const ::foo::bar::Person_TelNumber& contact_number() const;
  inline ::foo::bar::Person_TelNumber* mutable_contact_number();
  inline ::foo::bar::Person_TelNumber* release_contact_number();
  inline void set_allocated_contact_number(::foo::bar::Person_TelNumber* contact_number);

  // @@protoc_insertion_point(class_scope:foo.bar.Couple)
 private:
  inline void set_has_p1();
  inline void clear_has_p1();
  inline void set_has_p2();
  inline void clear_has_p2();
  inline void set_has_contact_number();
  inline void clear_has_contact_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::foo::bar::Person* p1_;
  ::foo::bar::Person* p2_;
  ::foo::bar::Person_TelNumber* contact_number_;
  friend void  protobuf_AddDesc_test01_2eproto();
  friend void protobuf_AssignDesc_test01_2eproto();
  friend void protobuf_ShutdownFile_test01_2eproto();

  void InitAsDefaultInstance();
  static Couple* default_instance_;
};
// ===================================================================


// ===================================================================

// Person_TelNumber

// required int32 area_code = 1;
inline bool Person_TelNumber::has_area_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Person_TelNumber::set_has_area_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Person_TelNumber::clear_has_area_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Person_TelNumber::clear_area_code() {
  area_code_ = 0;
  clear_has_area_code();
}
inline ::google::protobuf::int32 Person_TelNumber::area_code() const {
  // @@protoc_insertion_point(field_get:foo.bar.Person.TelNumber.area_code)
  return area_code_;
}
inline void Person_TelNumber::set_area_code(::google::protobuf::int32 value) {
  set_has_area_code();
  area_code_ = value;
  // @@protoc_insertion_point(field_set:foo.bar.Person.TelNumber.area_code)
}

// required int32 number = 2;
inline bool Person_TelNumber::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Person_TelNumber::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Person_TelNumber::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Person_TelNumber::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 Person_TelNumber::number() const {
  // @@protoc_insertion_point(field_get:foo.bar.Person.TelNumber.number)
  return number_;
}
inline void Person_TelNumber::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:foo.bar.Person.TelNumber.number)
}

// -------------------------------------------------------------------

// Person

// required string first_name = 1;
inline bool Person::has_first_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Person::set_has_first_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Person::clear_has_first_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Person::clear_first_name() {
  if (first_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    first_name_->clear();
  }
  clear_has_first_name();
}
inline const ::std::string& Person::first_name() const {
  // @@protoc_insertion_point(field_get:foo.bar.Person.first_name)
  return *first_name_;
}
inline void Person::set_first_name(const ::std::string& value) {
  set_has_first_name();
  if (first_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    first_name_ = new ::std::string;
  }
  first_name_->assign(value);
  // @@protoc_insertion_point(field_set:foo.bar.Person.first_name)
}
inline void Person::set_first_name(const char* value) {
  set_has_first_name();
  if (first_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    first_name_ = new ::std::string;
  }
  first_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:foo.bar.Person.first_name)
}
inline void Person::set_first_name(const char* value, size_t size) {
  set_has_first_name();
  if (first_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    first_name_ = new ::std::string;
  }
  first_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:foo.bar.Person.first_name)
}
inline ::std::string* Person::mutable_first_name() {
  set_has_first_name();
  if (first_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    first_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:foo.bar.Person.first_name)
  return first_name_;
}
inline ::std::string* Person::release_first_name() {
  clear_has_first_name();
  if (first_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = first_name_;
    first_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Person::set_allocated_first_name(::std::string* first_name) {
  if (first_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete first_name_;
  }
  if (first_name) {
    set_has_first_name();
    first_name_ = first_name;
  } else {
    clear_has_first_name();
    first_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:foo.bar.Person.first_name)
}

// required string last_name = 2;
inline bool Person::has_last_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Person::set_has_last_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Person::clear_has_last_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Person::clear_last_name() {
  if (last_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_name_->clear();
  }
  clear_has_last_name();
}
inline const ::std::string& Person::last_name() const {
  // @@protoc_insertion_point(field_get:foo.bar.Person.last_name)
  return *last_name_;
}
inline void Person::set_last_name(const ::std::string& value) {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_name_ = new ::std::string;
  }
  last_name_->assign(value);
  // @@protoc_insertion_point(field_set:foo.bar.Person.last_name)
}
inline void Person::set_last_name(const char* value) {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_name_ = new ::std::string;
  }
  last_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:foo.bar.Person.last_name)
}
inline void Person::set_last_name(const char* value, size_t size) {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_name_ = new ::std::string;
  }
  last_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:foo.bar.Person.last_name)
}
inline ::std::string* Person::mutable_last_name() {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:foo.bar.Person.last_name)
  return last_name_;
}
inline ::std::string* Person::release_last_name() {
  clear_has_last_name();
  if (last_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = last_name_;
    last_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Person::set_allocated_last_name(::std::string* last_name) {
  if (last_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_name_;
  }
  if (last_name) {
    set_has_last_name();
    last_name_ = last_name;
  } else {
    clear_has_last_name();
    last_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:foo.bar.Person.last_name)
}

// required int32 date_of_birth = 3;
inline bool Person::has_date_of_birth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Person::set_has_date_of_birth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Person::clear_has_date_of_birth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Person::clear_date_of_birth() {
  date_of_birth_ = 0;
  clear_has_date_of_birth();
}
inline ::google::protobuf::int32 Person::date_of_birth() const {
  // @@protoc_insertion_point(field_get:foo.bar.Person.date_of_birth)
  return date_of_birth_;
}
inline void Person::set_date_of_birth(::google::protobuf::int32 value) {
  set_has_date_of_birth();
  date_of_birth_ = value;
  // @@protoc_insertion_point(field_set:foo.bar.Person.date_of_birth)
}

// optional .foo.bar.Person.TelNumber tel_number = 4;
inline bool Person::has_tel_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Person::set_has_tel_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Person::clear_has_tel_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Person::clear_tel_number() {
  if (tel_number_ != NULL) tel_number_->::foo::bar::Person_TelNumber::Clear();
  clear_has_tel_number();
}
inline const ::foo::bar::Person_TelNumber& Person::tel_number() const {
  // @@protoc_insertion_point(field_get:foo.bar.Person.tel_number)
  return tel_number_ != NULL ? *tel_number_ : *default_instance_->tel_number_;
}
inline ::foo::bar::Person_TelNumber* Person::mutable_tel_number() {
  set_has_tel_number();
  if (tel_number_ == NULL) tel_number_ = new ::foo::bar::Person_TelNumber;
  // @@protoc_insertion_point(field_mutable:foo.bar.Person.tel_number)
  return tel_number_;
}
inline ::foo::bar::Person_TelNumber* Person::release_tel_number() {
  clear_has_tel_number();
  ::foo::bar::Person_TelNumber* temp = tel_number_;
  tel_number_ = NULL;
  return temp;
}
inline void Person::set_allocated_tel_number(::foo::bar::Person_TelNumber* tel_number) {
  delete tel_number_;
  tel_number_ = tel_number;
  if (tel_number) {
    set_has_tel_number();
  } else {
    clear_has_tel_number();
  }
  // @@protoc_insertion_point(field_set_allocated:foo.bar.Person.tel_number)
}

// optional int32 self_employed = 5;
inline bool Person::has_self_employed() const {
  return Employment_case() == kSelfEmployed;
}
inline void Person::set_has_self_employed() {
  _oneof_case_[0] = kSelfEmployed;
}
inline void Person::clear_self_employed() {
  if (has_self_employed()) {
    Employment_.self_employed_ = 0;
    clear_has_Employment();
  }
}
inline ::google::protobuf::int32 Person::self_employed() const {
  if (has_self_employed()) {
    return Employment_.self_employed_;
  }
  return 0;
}
inline void Person::set_self_employed(::google::protobuf::int32 value) {
  if (!has_self_employed()) {
    clear_Employment();
    set_has_self_employed();
  }
  Employment_.self_employed_ = value;
}

// optional string employed_by = 6;
inline bool Person::has_employed_by() const {
  return Employment_case() == kEmployedBy;
}
inline void Person::set_has_employed_by() {
  _oneof_case_[0] = kEmployedBy;
}
inline void Person::clear_employed_by() {
  if (has_employed_by()) {
    delete Employment_.employed_by_;
    clear_has_Employment();
  }
}
inline const ::std::string& Person::employed_by() const {
  if (has_employed_by()) {
    return *Employment_.employed_by_;
  }
  return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Person::set_employed_by(const ::std::string& value) {
  if (!has_employed_by()) {
    clear_Employment();
    set_has_employed_by();
    Employment_.employed_by_ = new ::std::string;
  }
  Employment_.employed_by_->assign(value);
}
inline void Person::set_employed_by(const char* value) {
  if (!has_employed_by()) {
    clear_Employment();
    set_has_employed_by();
    Employment_.employed_by_ = new ::std::string;
  }
  Employment_.employed_by_->assign(value);
}
inline void Person::set_employed_by(const char* value, size_t size) {
  if (!has_employed_by()) {
    clear_Employment();
    set_has_employed_by();
    Employment_.employed_by_ = new ::std::string;
  }
  Employment_.employed_by_->assign(
      reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Person::mutable_employed_by() {
  if (!has_employed_by()) {
    clear_Employment();
    set_has_employed_by();
    Employment_.employed_by_ = new ::std::string;
  }
  return Employment_.employed_by_;
}
inline ::std::string* Person::release_employed_by() {
  if (has_employed_by()) {
    clear_has_Employment();
    ::std::string* temp = Employment_.employed_by_;
    Employment_.employed_by_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Person::set_allocated_employed_by(::std::string* employed_by) {
  clear_Employment();
  if (employed_by) {
    set_has_employed_by();
    Employment_.employed_by_ = employed_by;
  }
}

inline bool Person::has_Employment() {
  return Employment_case() != EMPLOYMENT_NOT_SET;
}
inline void Person::clear_has_Employment() {
  _oneof_case_[0] = EMPLOYMENT_NOT_SET;
}
inline Person::EmploymentCase Person::Employment_case() const {
  return Person::EmploymentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Couple

// required .foo.bar.Person p1 = 1;
inline bool Couple::has_p1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Couple::set_has_p1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Couple::clear_has_p1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Couple::clear_p1() {
  if (p1_ != NULL) p1_->::foo::bar::Person::Clear();
  clear_has_p1();
}
inline const ::foo::bar::Person& Couple::p1() const {
  // @@protoc_insertion_point(field_get:foo.bar.Couple.p1)
  return p1_ != NULL ? *p1_ : *default_instance_->p1_;
}
inline ::foo::bar::Person* Couple::mutable_p1() {
  set_has_p1();
  if (p1_ == NULL) p1_ = new ::foo::bar::Person;
  // @@protoc_insertion_point(field_mutable:foo.bar.Couple.p1)
  return p1_;
}
inline ::foo::bar::Person* Couple::release_p1() {
  clear_has_p1();
  ::foo::bar::Person* temp = p1_;
  p1_ = NULL;
  return temp;
}
inline void Couple::set_allocated_p1(::foo::bar::Person* p1) {
  delete p1_;
  p1_ = p1;
  if (p1) {
    set_has_p1();
  } else {
    clear_has_p1();
  }
  // @@protoc_insertion_point(field_set_allocated:foo.bar.Couple.p1)
}

// required .foo.bar.Person p2 = 2;
inline bool Couple::has_p2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Couple::set_has_p2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Couple::clear_has_p2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Couple::clear_p2() {
  if (p2_ != NULL) p2_->::foo::bar::Person::Clear();
  clear_has_p2();
}
inline const ::foo::bar::Person& Couple::p2() const {
  // @@protoc_insertion_point(field_get:foo.bar.Couple.p2)
  return p2_ != NULL ? *p2_ : *default_instance_->p2_;
}
inline ::foo::bar::Person* Couple::mutable_p2() {
  set_has_p2();
  if (p2_ == NULL) p2_ = new ::foo::bar::Person;
  // @@protoc_insertion_point(field_mutable:foo.bar.Couple.p2)
  return p2_;
}
inline ::foo::bar::Person* Couple::release_p2() {
  clear_has_p2();
  ::foo::bar::Person* temp = p2_;
  p2_ = NULL;
  return temp;
}
inline void Couple::set_allocated_p2(::foo::bar::Person* p2) {
  delete p2_;
  p2_ = p2;
  if (p2) {
    set_has_p2();
  } else {
    clear_has_p2();
  }
  // @@protoc_insertion_point(field_set_allocated:foo.bar.Couple.p2)
}

// optional .foo.bar.Person.TelNumber contact_number = 3;
inline bool Couple::has_contact_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Couple::set_has_contact_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Couple::clear_has_contact_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Couple::clear_contact_number() {
  if (contact_number_ != NULL) contact_number_->::foo::bar::Person_TelNumber::Clear();
  clear_has_contact_number();
}
inline const ::foo::bar::Person_TelNumber& Couple::contact_number() const {
  // @@protoc_insertion_point(field_get:foo.bar.Couple.contact_number)
  return contact_number_ != NULL ? *contact_number_ : *default_instance_->contact_number_;
}
inline ::foo::bar::Person_TelNumber* Couple::mutable_contact_number() {
  set_has_contact_number();
  if (contact_number_ == NULL) contact_number_ = new ::foo::bar::Person_TelNumber;
  // @@protoc_insertion_point(field_mutable:foo.bar.Couple.contact_number)
  return contact_number_;
}
inline ::foo::bar::Person_TelNumber* Couple::release_contact_number() {
  clear_has_contact_number();
  ::foo::bar::Person_TelNumber* temp = contact_number_;
  contact_number_ = NULL;
  return temp;
}
inline void Couple::set_allocated_contact_number(::foo::bar::Person_TelNumber* contact_number) {
  delete contact_number_;
  contact_number_ = contact_number;
  if (contact_number) {
    set_has_contact_number();
  } else {
    clear_has_contact_number();
  }
  // @@protoc_insertion_point(field_set_allocated:foo.bar.Couple.contact_number)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bar
}  // namespace foo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test01_2eproto__INCLUDED

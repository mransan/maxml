# 1 "lex6.mll"
 
(** Lex2 header section *) 

(*
&lt; represents \\"<\\"
&gt; represents \\">\\"
&amp; represents \\"&\\"
&apos; represents \\'
&quot; represents Quote character
*)

(*
&#20013; or &#x4e2d;
*)

type token = 
 | More 
 | End 


# 23 "lex6.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\252\255\254\255\001\000\000\000\249\255\250\255\000\000\
    \000\000\000\000\002\000\000\000\255\255\001\000\254\255\000\000\
    \002\000\002\000\253\255\000\000\003\000\252\255\008\000\004\000\
    \004\000\251\255\001\000\253\255\016\000\074\000\097\000\255\255\
    \254\255\028\000";
  Lexing.lex_backtrk = 
   "\000\000\255\255\255\255\000\000\255\255\255\255\255\255\006\000\
    \006\000\006\000\006\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\002\000\002\000\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_default = 
   "\003\000\000\000\000\000\003\000\005\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\000\000\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\000\000\027\000\000\000\255\255\255\255\255\255\000\000\
    \000\000\255\255";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\006\000\000\000\000\000\002\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\012\000\014\000\018\000\021\000\025\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\000\000\032\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\000\000\032\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\008\000\000\000\000\000\000\000\000\000\000\000\009\000\
    \000\000\000\000\000\000\000\000\010\000\016\000\000\000\019\000\
    \015\000\007\000\017\000\020\000\013\000\022\000\011\000\023\000\
    \024\000\029\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\000\000\031\000\000\000\000\000\000\000\
    \000\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \000\000\000\000\000\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\004\000\255\255\255\255\000\000\003\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\011\000\013\000\017\000\020\000\024\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\255\255\028\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\255\255\033\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\004\000\255\255\255\255\255\255\255\255\255\255\004\000\
    \255\255\255\255\255\255\255\255\004\000\008\000\255\255\015\000\
    \008\000\004\000\016\000\019\000\009\000\007\000\010\000\022\000\
    \023\000\026\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\029\000\029\000\029\000\029\000\029\000\
    \029\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\255\255\030\000\255\255\255\255\255\255\
    \255\255\255\255\030\000\030\000\030\000\030\000\030\000\030\000\
    \255\255\255\255\255\255\029\000\029\000\029\000\029\000\029\000\
    \029\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\030\000\030\000\030\000\030\000\030\000\030\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\003\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec tokenize b string_of_char_int lexbuf =
    __ocaml_lex_tokenize_rec b string_of_char_int lexbuf 0
and __ocaml_lex_tokenize_rec b string_of_char_int lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 39 "lex6.mll"
              ( Buffer.add_string b (Lexing.lexeme lexbuf); More )
# 156 "lex6.ml"

  | 1 ->
# 40 "lex6.mll"
              ( 
    tokenise_special_char b string_of_char_int lexbuf; 
    More
  )
# 164 "lex6.ml"

  | 2 ->
# 44 "lex6.mll"
              ( failwith "Lexing Error")
# 169 "lex6.ml"

  | 3 ->
# 45 "lex6.mll"
              ( End )
# 174 "lex6.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_tokenize_rec b string_of_char_int lexbuf __ocaml_lex_state

and tokenise_special_char b string_of_char_int lexbuf =
    __ocaml_lex_tokenise_special_char_rec b string_of_char_int lexbuf 4
and __ocaml_lex_tokenise_special_char_rec b string_of_char_int lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 47 "lex6.mll"
            ( Buffer.add_char b '<' )
# 186 "lex6.ml"

  | 1 ->
# 48 "lex6.mll"
            ( Buffer.add_char b '>' )
# 191 "lex6.ml"

  | 2 ->
# 49 "lex6.mll"
            ( Buffer.add_char b '&' )
# 196 "lex6.ml"

  | 3 ->
# 50 "lex6.mll"
            ( Buffer.add_char b '\'' )
# 201 "lex6.ml"

  | 4 ->
# 51 "lex6.mll"
            ( Buffer.add_char b '\"' )
# 206 "lex6.ml"

  | 5 ->
# 52 "lex6.mll"
            ( tokenise_number b string_of_char_int lexbuf )
# 211 "lex6.ml"

  | 6 ->
# 54 "lex6.mll"
            ( () )
# 216 "lex6.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_tokenise_special_char_rec b string_of_char_int lexbuf __ocaml_lex_state

and tokenise_number b string_of_char_int lexbuf =
    __ocaml_lex_tokenise_number_rec b string_of_char_int lexbuf 26
and __ocaml_lex_tokenise_number_rec b string_of_char_int lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 57 "lex6.mll"
               ( 
    let b' = Buffer.create 32 in 
    Buffer.add_char b' '0'; 
    let s = Lexing.lexeme lexbuf in 
    Buffer.add_substring b' s 0 (String.length s -1); 
    let char_int = int_of_string (Buffer.contents b') in 
    Buffer.add_string b (string_of_char_int char_int); 
  )
# 235 "lex6.ml"

  | 1 ->
# 65 "lex6.mll"
             ( 
    let s = Lexing.lexeme lexbuf in 
    let char_int = int_of_string (String.sub s 0 (String.length s - 1)) in 
    Buffer.add_string b (string_of_char_int char_int)
  )
# 244 "lex6.ml"

  | 2 ->
# 71 "lex6.mll"
         ( failwith "Lexing Error" )
# 249 "lex6.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_tokenise_number_rec b string_of_char_int lexbuf __ocaml_lex_state

;;

# 74 "lex6.mll"
 



# 261 "lex6.ml"
